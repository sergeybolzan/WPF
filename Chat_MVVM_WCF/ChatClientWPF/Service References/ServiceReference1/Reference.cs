//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClientWPF.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IChat", CallbackContract=typeof(ChatClientWPF.ServiceReference1.IChatCallback))]
    public interface IChat {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Join")]
        void Join(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Join")]
        System.Threading.Tasks.Task JoinAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Leave")]
        void Leave(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/Leave")]
        System.Threading.Tasks.Task LeaveAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendMessage")]
        void SendMessage(string name, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string name, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendPrivateMessage")]
        void SendPrivateMessage(string nameFrom, string message, string nameTo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/SendPrivateMessage")]
        System.Threading.Tasks.Task SendPrivateMessageAsync(string nameFrom, string message, string nameTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetNames", ReplyAction="http://tempuri.org/IChat/GetNamesResponse")]
        string[] GetNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChat/GetNames", ReplyAction="http://tempuri.org/IChat/GetNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetNamesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/AddUserToList")]
        void AddUserToList(string name, bool showMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/DeleteUserFromList")]
        void DeleteUserFromList(string name, bool showMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/PrintMessage")]
        void PrintMessage(string name, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChat/PrintPrivateMessage")]
        void PrintPrivateMessage(string nameFrom, string message, string nameTo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatChannel : ChatClientWPF.ServiceReference1.IChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatClient : System.ServiceModel.DuplexClientBase<ChatClientWPF.ServiceReference1.IChat>, ChatClientWPF.ServiceReference1.IChat {
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Join(string name) {
            base.Channel.Join(name);
        }
        
        public System.Threading.Tasks.Task JoinAsync(string name) {
            return base.Channel.JoinAsync(name);
        }
        
        public void Leave(string name) {
            base.Channel.Leave(name);
        }
        
        public System.Threading.Tasks.Task LeaveAsync(string name) {
            return base.Channel.LeaveAsync(name);
        }
        
        public void SendMessage(string name, string message) {
            base.Channel.SendMessage(name, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string name, string message) {
            return base.Channel.SendMessageAsync(name, message);
        }
        
        public void SendPrivateMessage(string nameFrom, string message, string nameTo) {
            base.Channel.SendPrivateMessage(nameFrom, message, nameTo);
        }
        
        public System.Threading.Tasks.Task SendPrivateMessageAsync(string nameFrom, string message, string nameTo) {
            return base.Channel.SendPrivateMessageAsync(nameFrom, message, nameTo);
        }
        
        public string[] GetNames() {
            return base.Channel.GetNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetNamesAsync() {
            return base.Channel.GetNamesAsync();
        }
    }
}
